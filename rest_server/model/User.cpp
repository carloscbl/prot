/**
* prot
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "User.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

User::User()
{
    m_Username = "";
    m_ParamsIsSet = false;
    m_TaskerIsSet = false;
    m_SchedulerIsSet = false;
    m_Id = "";
    
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const User& o)
{
    j = nlohmann::json();
    j["username"] = o.m_Username;
    if(o.paramsIsSet())
        j["params"] = o.m_Params;
    if(o.taskerIsSet())
        j["tasker"] = o.m_Tasker;
    if(o.schedulerIsSet())
        j["scheduler"] = o.m_Scheduler;
    j["id"] = o.m_Id;
}

void from_json(const nlohmann::json& j, User& o)
{
    j.at("username").get_to(o.m_Username);
    if(j.find("params") != j.end())
    {
        j.at("params").get_to(o.m_Params);
        o.m_ParamsIsSet = true;
    } 
    if(j.find("tasker") != j.end())
    {
        j.at("tasker").get_to(o.m_Tasker);
        o.m_TaskerIsSet = true;
    } 
    if(j.find("scheduler") != j.end())
    {
        j.at("scheduler").get_to(o.m_Scheduler);
        o.m_SchedulerIsSet = true;
    } 
    j.at("id").get_to(o.m_Id);
}

std::string User::getUsername() const
{
    return m_Username;
}
void User::setUsername(std::string const& value)
{
    m_Username = value;
}
User_params User::getParams() const
{
    return m_Params;
}
void User::setParams(User_params const& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}
bool User::paramsIsSet() const
{
    return m_ParamsIsSet;
}
void User::unsetParams()
{
    m_ParamsIsSet = false;
}
Tasker User::getTasker() const
{
    return m_Tasker;
}
void User::setTasker(Tasker const& value)
{
    m_Tasker = value;
    m_TaskerIsSet = true;
}
bool User::taskerIsSet() const
{
    return m_TaskerIsSet;
}
void User::unsetTasker()
{
    m_TaskerIsSet = false;
}
Scheduler User::getScheduler() const
{
    return m_Scheduler;
}
void User::setScheduler(Scheduler const& value)
{
    m_Scheduler = value;
    m_SchedulerIsSet = true;
}
bool User::schedulerIsSet() const
{
    return m_SchedulerIsSet;
}
void User::unsetScheduler()
{
    m_SchedulerIsSet = false;
}
std::string User::getId() const
{
    return m_Id;
}
void User::setId(std::string const& value)
{
    m_Id = value;
}

}
}
}
}

