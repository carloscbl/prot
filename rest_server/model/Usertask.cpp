/**
* prot
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Usertask.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Usertask::Usertask()
{
    m_User = "";
    m_Task_group = "";
    m_Task_groupIsSet = false;
    m_DurationIsSet = false;
    m_Tag = "";
    m_TagIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Name = "";
    m_Other_data = "";
    m_Other_dataIsSet = false;
    m_Task_source = "";
    m_Task_sourceIsSet = false;
    
}

Usertask::~Usertask()
{
}

void Usertask::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Usertask& o)
{
    j = nlohmann::json();
    j["user"] = o.m_User;
    if(o.taskGroupIsSet())
        j["task_group"] = o.m_Task_group;
    j["interval"] = o.m_Interval;
    if(o.durationIsSet())
        j["duration"] = o.m_Duration;
    if(o.tagIsSet())
        j["task_id"] = o.m_Tag;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    j["name"] = o.m_Name;
    if(o.otherDataIsSet())
        j["other_data"] = o.m_Other_data;
    if(o.taskSourceIsSet())
        j["task_source"] = o.m_Task_source;
}

void from_json(const nlohmann::json& j, Usertask& o)
{
    j.at("user").get_to(o.m_User);
    if(j.find("task_group") != j.end())
    {
        j.at("task_group").get_to(o.m_Task_group);
        o.m_Task_groupIsSet = true;
    } 
    j.at("interval").get_to(o.m_Interval);
    if(j.find("duration") != j.end())
    {
        j.at("duration").get_to(o.m_Duration);
        o.m_DurationIsSet = true;
    } 
    if(j.find("task_id") != j.end())
    {
        j.at("task_id").get_to(o.m_Tag);
        o.m_TagIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    j.at("name").get_to(o.m_Name);
    if(j.find("other_data") != j.end())
    {
        j.at("other_data").get_to(o.m_Other_data);
        o.m_Other_dataIsSet = true;
    } 
    if(j.find("task_source") != j.end())
    {
        j.at("task_source").get_to(o.m_Task_source);
        o.m_Task_sourceIsSet = true;
    } 
}

std::string Usertask::getUser() const
{
    return m_User;
}
void Usertask::setUser(std::string const& value)
{
    m_User = value;
}
std::string Usertask::getTaskGroup() const
{
    return m_Task_group;
}
void Usertask::setTaskGroup(std::string const& value)
{
    m_Task_group = value;
    m_Task_groupIsSet = true;
}
bool Usertask::taskGroupIsSet() const
{
    return m_Task_groupIsSet;
}
void Usertask::unsetTask_group()
{
    m_Task_groupIsSet = false;
}
Interval Usertask::getInterval() const
{
    return m_Interval;
}
void Usertask::setInterval(Interval const& value)
{
    m_Interval = value;
}
Duration Usertask::getDuration() const
{
    return m_Duration;
}
void Usertask::setDuration(Duration const& value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}
bool Usertask::durationIsSet() const
{
    return m_DurationIsSet;
}
void Usertask::unsetDuration()
{
    m_DurationIsSet = false;
}
std::string Usertask::getTag() const
{
    return m_Tag;
}
void Usertask::setTag(std::string const& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}
bool Usertask::tagIsSet() const
{
    return m_TagIsSet;
}
void Usertask::unsetTag()
{
    m_TagIsSet = false;
}
std::string Usertask::getDescription() const
{
    return m_Description;
}
void Usertask::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Usertask::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Usertask::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string Usertask::getName() const
{
    return m_Name;
}
void Usertask::setName(std::string const& value)
{
    m_Name = value;
}
std::string Usertask::getOtherData() const
{
    return m_Other_data;
}
void Usertask::setOtherData(std::string const& value)
{
    m_Other_data = value;
    m_Other_dataIsSet = true;
}
bool Usertask::otherDataIsSet() const
{
    return m_Other_dataIsSet;
}
void Usertask::unsetOther_data()
{
    m_Other_dataIsSet = false;
}
std::string Usertask::getTaskSource() const
{
    return m_Task_source;
}
void Usertask::setTaskSource(std::string const& value)
{
    m_Task_source = value;
    m_Task_sourceIsSet = true;
}
bool Usertask::taskSourceIsSet() const
{
    return m_Task_sourceIsSet;
}
void Usertask::unsetTask_source()
{
    m_Task_sourceIsSet = false;
}

}
}
}
}

