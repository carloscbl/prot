/**
* prot
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Autotask.h
 *
 * 
 */

#ifndef Autotask_H_
#define Autotask_H_


#include "Duration.h"
#include <string>
#include "When.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Autotask
{
public:
    Autotask();
    virtual ~Autotask();

    void validate();

    /////////////////////////////////////////////
    /// Autotask members

    /// <summary>
    /// 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string>& getRestrictions();
    void setRestrictions(std::vector<std::string> const& value);
    bool restrictionsIsSet() const;
    void unsetRestrictions();
    /// <summary>
    /// 
    /// </summary>
    std::string getTaskGroup() const;
    void setTaskGroup(std::string const& value);
    bool taskGroupIsSet() const;
    void unsetTask_group();
    /// <summary>
    /// 
    /// </summary>
    When getWhen() const;
    void setWhen(When const& value);
    bool whenIsSet() const;
    void unsetWhen();
    /// <summary>
    /// 
    /// </summary>
    std::string getFrequency() const;
    void setFrequency(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    Duration getDuration() const;
    void setDuration(Duration const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getTag() const;
    void setTag(std::string const& value);
    bool tagIsSet() const;
    void unsetTag();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);

    friend void to_json(nlohmann::json& j, const Autotask& o);
    friend void from_json(const nlohmann::json& j, Autotask& o);
protected:
    std::string m_User;

    std::vector<std::string> m_Restrictions;
    bool m_RestrictionsIsSet;
    std::string m_Task_group;
    bool m_Task_groupIsSet;
    When m_When;
    bool m_WhenIsSet;
    std::string m_Frequency;

    Duration m_Duration;

    std::string m_Tag;
    bool m_TagIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Name;

};

}
}
}
}

#endif /* Autotask_H_ */
