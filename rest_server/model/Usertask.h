/**
* prot
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Usertask.h
 *
 * 
 */

#ifndef Usertask_H_
#define Usertask_H_


#include "Duration.h"
#include <string>
#include "Interval.h"
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Usertask
{
public:
    Usertask();
    virtual ~Usertask();

    void validate();

    /////////////////////////////////////////////
    /// Usertask members

    /// <summary>
    /// 
    /// </summary>
    std::string getUser() const;
    void setUser(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getTaskGroup() const;
    void setTaskGroup(std::string const& value);
    bool taskGroupIsSet() const;
    void unsetTask_group();
    /// <summary>
    /// 
    /// </summary>
    Interval getInterval() const;
    void setInterval(Interval const& value);
    /// <summary>
    /// 
    /// </summary>
    Duration getDuration() const;
    void setDuration(Duration const& value);
    bool durationIsSet() const;
    void unsetDuration();
    /// <summary>
    /// 
    /// </summary>
    std::string getTag() const;
    void setTag(std::string const& value);
    bool tagIsSet() const;
    void unsetTag();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getOtherData() const;
    void setOtherData(std::string const& value);
    bool otherDataIsSet() const;
    void unsetOther_data();
    /// <summary>
    /// For example if this task comes from a alexa or outlook task
    /// </summary>
    std::string getTaskSource() const;
    void setTaskSource(std::string const& value);
    bool taskSourceIsSet() const;
    void unsetTask_source();

    friend void to_json(nlohmann::json& j, const Usertask& o);
    friend void from_json(const nlohmann::json& j, Usertask& o);
protected:
    std::string m_User;

    std::string m_Task_group;
    bool m_Task_groupIsSet;
    Interval m_Interval;

    Duration m_Duration;
    bool m_DurationIsSet;
    std::string m_Tag;
    bool m_TagIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Name;

    std::string m_Other_data;
    bool m_Other_dataIsSet;
    std::string m_Task_source;
    bool m_Task_sourceIsSet;
};

}
}
}
}

#endif /* Usertask_H_ */
