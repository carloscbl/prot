/**
* prot
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Autotask.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Autotask::Autotask()
{
    m_User = "";
    m_RestrictionsIsSet = false;
    m_Task_group = "";
    m_Task_groupIsSet = false;
    m_WhenIsSet = false;
    m_Frequency = "";
    m_Tag = "";
    m_TagIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Name = "";
    
}

Autotask::~Autotask()
{
}

void Autotask::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Autotask& o)
{
    j = nlohmann::json();
    j["user"] = o.m_User;
    if(o.restrictionsIsSet() || !o.m_Restrictions.empty())
        j["restrictions"] = o.m_Restrictions;
    if(o.taskGroupIsSet())
        j["task_group"] = o.m_Task_group;
    if(o.whenIsSet())
        j["when"] = o.m_When;
    j["frequency"] = o.m_Frequency;
    j["duration"] = o.m_Duration;
    if(o.tagIsSet())
        j["tag"] = o.m_Tag;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    j["name"] = o.m_Name;
}

void from_json(const nlohmann::json& j, Autotask& o)
{
    j.at("user").get_to(o.m_User);
    if(j.find("restrictions") != j.end())
    {
        j.at("restrictions").get_to(o.m_Restrictions);
        o.m_RestrictionsIsSet = true;
    } 
    if(j.find("task_group") != j.end())
    {
        j.at("task_group").get_to(o.m_Task_group);
        o.m_Task_groupIsSet = true;
    } 
    if(j.find("when") != j.end())
    {
        j.at("when").get_to(o.m_When);
        o.m_WhenIsSet = true;
    } 
    j.at("frequency").get_to(o.m_Frequency);
    j.at("duration").get_to(o.m_Duration);
    if(j.find("tag") != j.end())
    {
        j.at("tag").get_to(o.m_Tag);
        o.m_TagIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    j.at("name").get_to(o.m_Name);
}

std::string Autotask::getUser() const
{
    return m_User;
}
void Autotask::setUser(std::string const& value)
{
    m_User = value;
}
std::vector<std::string>& Autotask::getRestrictions()
{
    return m_Restrictions;
}
void Autotask::setRestrictions(std::vector<std::string> const& value)
{
    m_Restrictions = value;
    m_RestrictionsIsSet = true;
}
bool Autotask::restrictionsIsSet() const
{
    return m_RestrictionsIsSet;
}
void Autotask::unsetRestrictions()
{
    m_RestrictionsIsSet = false;
}
std::string Autotask::getTaskGroup() const
{
    return m_Task_group;
}
void Autotask::setTaskGroup(std::string const& value)
{
    m_Task_group = value;
    m_Task_groupIsSet = true;
}
bool Autotask::taskGroupIsSet() const
{
    return m_Task_groupIsSet;
}
void Autotask::unsetTask_group()
{
    m_Task_groupIsSet = false;
}
When Autotask::getWhen() const
{
    return m_When;
}
void Autotask::setWhen(When const& value)
{
    m_When = value;
    m_WhenIsSet = true;
}
bool Autotask::whenIsSet() const
{
    return m_WhenIsSet;
}
void Autotask::unsetWhen()
{
    m_WhenIsSet = false;
}
std::string Autotask::getFrequency() const
{
    return m_Frequency;
}
void Autotask::setFrequency(std::string const& value)
{
    m_Frequency = value;
}
Duration Autotask::getDuration() const
{
    return m_Duration;
}
void Autotask::setDuration(Duration const& value)
{
    m_Duration = value;
}
std::string Autotask::getTag() const
{
    return m_Tag;
}
void Autotask::setTag(std::string const& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}
bool Autotask::tagIsSet() const
{
    return m_TagIsSet;
}
void Autotask::unsetTag()
{
    m_TagIsSet = false;
}
std::string Autotask::getDescription() const
{
    return m_Description;
}
void Autotask::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Autotask::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Autotask::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string Autotask::getName() const
{
    return m_Name;
}
void Autotask::setName(std::string const& value)
{
    m_Name = value;
}

}
}
}
}

