/**
* prot
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Duration_oneOf_1.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Duration_oneOf_1::Duration_oneOf_1()
{
    m_Seconds = 0;
    m_SecondsIsSet = false;
    m_Minutes = 0;
    m_MinutesIsSet = false;
    m_Hours = 0;
    m_HoursIsSet = false;
    m_Days = 0;
    m_DaysIsSet = false;
    m_Weeks = 0;
    m_WeeksIsSet = false;
    m_Months = 0;
    m_MonthsIsSet = false;
    m_Years = 0;
    m_YearsIsSet = false;
    
}

Duration_oneOf_1::~Duration_oneOf_1()
{
}

void Duration_oneOf_1::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const Duration_oneOf_1& o)
{
    j = nlohmann::json();
    if(o.secondsIsSet())
        j["seconds"] = o.m_Seconds;
    if(o.minutesIsSet())
        j["minutes"] = o.m_Minutes;
    if(o.hoursIsSet())
        j["hours"] = o.m_Hours;
    if(o.daysIsSet())
        j["days"] = o.m_Days;
    if(o.weeksIsSet())
        j["weeks"] = o.m_Weeks;
    if(o.monthsIsSet())
        j["months"] = o.m_Months;
    if(o.yearsIsSet())
        j["years"] = o.m_Years;
}

void from_json(const nlohmann::json& j, Duration_oneOf_1& o)
{
    if(j.find("seconds") != j.end())
    {
        j.at("seconds").get_to(o.m_Seconds);
        o.m_SecondsIsSet = true;
    } 
    if(j.find("minutes") != j.end())
    {
        j.at("minutes").get_to(o.m_Minutes);
        o.m_MinutesIsSet = true;
    } 
    if(j.find("hours") != j.end())
    {
        j.at("hours").get_to(o.m_Hours);
        o.m_HoursIsSet = true;
    } 
    if(j.find("days") != j.end())
    {
        j.at("days").get_to(o.m_Days);
        o.m_DaysIsSet = true;
    } 
    if(j.find("weeks") != j.end())
    {
        j.at("weeks").get_to(o.m_Weeks);
        o.m_WeeksIsSet = true;
    } 
    if(j.find("months") != j.end())
    {
        j.at("months").get_to(o.m_Months);
        o.m_MonthsIsSet = true;
    } 
    if(j.find("years") != j.end())
    {
        j.at("years").get_to(o.m_Years);
        o.m_YearsIsSet = true;
    } 
}

int32_t Duration_oneOf_1::getSeconds() const
{
    return m_Seconds;
}
void Duration_oneOf_1::setSeconds(int32_t const value)
{
    m_Seconds = value;
    m_SecondsIsSet = true;
}
bool Duration_oneOf_1::secondsIsSet() const
{
    return m_SecondsIsSet;
}
void Duration_oneOf_1::unsetSeconds()
{
    m_SecondsIsSet = false;
}
int32_t Duration_oneOf_1::getMinutes() const
{
    return m_Minutes;
}
void Duration_oneOf_1::setMinutes(int32_t const value)
{
    m_Minutes = value;
    m_MinutesIsSet = true;
}
bool Duration_oneOf_1::minutesIsSet() const
{
    return m_MinutesIsSet;
}
void Duration_oneOf_1::unsetMinutes()
{
    m_MinutesIsSet = false;
}
int32_t Duration_oneOf_1::getHours() const
{
    return m_Hours;
}
void Duration_oneOf_1::setHours(int32_t const value)
{
    m_Hours = value;
    m_HoursIsSet = true;
}
bool Duration_oneOf_1::hoursIsSet() const
{
    return m_HoursIsSet;
}
void Duration_oneOf_1::unsetHours()
{
    m_HoursIsSet = false;
}
int32_t Duration_oneOf_1::getDays() const
{
    return m_Days;
}
void Duration_oneOf_1::setDays(int32_t const value)
{
    m_Days = value;
    m_DaysIsSet = true;
}
bool Duration_oneOf_1::daysIsSet() const
{
    return m_DaysIsSet;
}
void Duration_oneOf_1::unsetDays()
{
    m_DaysIsSet = false;
}
int32_t Duration_oneOf_1::getWeeks() const
{
    return m_Weeks;
}
void Duration_oneOf_1::setWeeks(int32_t const value)
{
    m_Weeks = value;
    m_WeeksIsSet = true;
}
bool Duration_oneOf_1::weeksIsSet() const
{
    return m_WeeksIsSet;
}
void Duration_oneOf_1::unsetWeeks()
{
    m_WeeksIsSet = false;
}
int32_t Duration_oneOf_1::getMonths() const
{
    return m_Months;
}
void Duration_oneOf_1::setMonths(int32_t const value)
{
    m_Months = value;
    m_MonthsIsSet = true;
}
bool Duration_oneOf_1::monthsIsSet() const
{
    return m_MonthsIsSet;
}
void Duration_oneOf_1::unsetMonths()
{
    m_MonthsIsSet = false;
}
int32_t Duration_oneOf_1::getYears() const
{
    return m_Years;
}
void Duration_oneOf_1::setYears(int32_t const value)
{
    m_Years = value;
    m_YearsIsSet = true;
}
bool Duration_oneOf_1::yearsIsSet() const
{
    return m_YearsIsSet;
}
void Duration_oneOf_1::unsetYears()
{
    m_YearsIsSet = false;
}

}
}
}
}

