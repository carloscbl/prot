// generated by /usr/local/bin/sqlpp11-ddl2cpp ../db_schemas/prot/prot.sql orm_prot orm_prot
#ifndef ORM_PROT_ORM_PROT_H
#define ORM_PROT_ORM_PROT_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace orm_prot
{
  namespace AppSessions_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UnqName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unq_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unqName;
            T& operator()() { return unqName; }
            const T& operator()() const { return unqName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Json
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "json";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T json;
            T& operator()() { return json; }
            const T& operator()() const { return json; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct UserApps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_apps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userApps;
            T& operator()() { return userApps; }
            const T& operator()() const { return userApps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace AppSessions_

  struct AppSessions: sqlpp::table_t<AppSessions,
               AppSessions_::Id,
               AppSessions_::UnqName,
               AppSessions_::Json,
               AppSessions_::UserApps>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "app_sessions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T appSessions;
        T& operator()() { return appSessions; }
        const T& operator()() const { return appSessions; }
      };
    };
  };
  namespace Apps_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Json
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "json";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T json;
            T& operator()() { return json; }
            const T& operator()() const { return json; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Developer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "developer";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T developer;
            T& operator()() { return developer; }
            const T& operator()() const { return developer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IdPublic
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id_public";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idPublic;
            T& operator()() { return idPublic; }
            const T& operator()() const { return idPublic; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Disabled
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "disabled";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T disabled;
            T& operator()() { return disabled; }
            const T& operator()() const { return disabled; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  } // namespace Apps_

  struct Apps: sqlpp::table_t<Apps,
               Apps_::Id,
               Apps_::Json,
               Apps_::Name,
               Apps_::Developer,
               Apps_::IdPublic,
               Apps_::Disabled>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "apps";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T apps;
        T& operator()() { return apps; }
        const T& operator()() const { return apps; }
      };
    };
  };
  namespace ProtJobs_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct StartedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "started_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startedAt;
            T& operator()() { return startedAt; }
            const T& operator()() const { return startedAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct JobJson
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "job_json";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T jobJson;
            T& operator()() { return jobJson; }
            const T& operator()() const { return jobJson; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct StartJobAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start_job_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startJobAt;
            T& operator()() { return startJobAt; }
            const T& operator()() const { return startJobAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct TaskId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "task_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taskId;
            T& operator()() { return taskId; }
            const T& operator()() const { return taskId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace ProtJobs_

  struct ProtJobs: sqlpp::table_t<ProtJobs,
               ProtJobs_::Id,
               ProtJobs_::StartedAt,
               ProtJobs_::JobJson,
               ProtJobs_::Type,
               ProtJobs_::StartJobAt,
               ProtJobs_::TaskId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "prot_jobs";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T protJobs;
        T& operator()() { return protJobs; }
        const T& operator()() const { return protJobs; }
      };
    };
  };
  namespace Schedulers_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Schedulers_

  struct Schedulers: sqlpp::table_t<Schedulers,
               Schedulers_::Id,
               Schedulers_::User>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "schedulers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T schedulers;
        T& operator()() { return schedulers; }
        const T& operator()() const { return schedulers; }
      };
    };
  };
  namespace Taskers_
  {
    struct Idtasker
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idtasker";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idtasker;
            T& operator()() { return idtasker; }
            const T& operator()() const { return idtasker; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct User
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T user;
            T& operator()() { return user; }
            const T& operator()() const { return user; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Taskers_

  struct Taskers: sqlpp::table_t<Taskers,
               Taskers_::Idtasker,
               Taskers_::User>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "taskers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T taskers;
        T& operator()() { return taskers; }
        const T& operator()() const { return taskers; }
      };
    };
  };
  namespace Tasks_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Group
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "!group";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T group;
            T& operator()() { return group; }
            const T& operator()() const { return group; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Json
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "json";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T json;
            T& operator()() { return json; }
            const T& operator()() const { return json; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Start
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "start";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T start;
            T& operator()() { return start; }
            const T& operator()() const { return start; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct End
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "end";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T end;
            T& operator()() { return end; }
            const T& operator()() const { return end; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct ConfirmedDone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "confirmed_done";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T confirmedDone;
            T& operator()() { return confirmedDone; }
            const T& operator()() const { return confirmedDone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct ExternalId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "external_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T externalId;
            T& operator()() { return externalId; }
            const T& operator()() const { return externalId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct FromUserAppsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "from_user_apps_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fromUserAppsId;
            T& operator()() { return fromUserAppsId; }
            const T& operator()() const { return fromUserAppsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ProtId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prot_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T protId;
            T& operator()() { return protId; }
            const T& operator()() const { return protId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CreatedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdAt;
            T& operator()() { return createdAt; }
            const T& operator()() const { return createdAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct UpdatedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "updated_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T updatedAt;
            T& operator()() { return updatedAt; }
            const T& operator()() const { return updatedAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct SessionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "session_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sessionId;
            T& operator()() { return sessionId; }
            const T& operator()() const { return sessionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  } // namespace Tasks_

  struct Tasks: sqlpp::table_t<Tasks,
               Tasks_::Id,
               Tasks_::Name,
               Tasks_::Group,
               Tasks_::Json,
               Tasks_::Start,
               Tasks_::End,
               Tasks_::ConfirmedDone,
               Tasks_::ExternalId,
               Tasks_::FromUserAppsId,
               Tasks_::ProtId,
               Tasks_::CreatedAt,
               Tasks_::UpdatedAt,
               Tasks_::SessionId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "tasks";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T tasks;
        T& operator()() { return tasks; }
        const T& operator()() const { return tasks; }
      };
    };
  };
  namespace TasksSchedulers_
  {
    struct Idtask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idtask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idtask;
            T& operator()() { return idtask; }
            const T& operator()() const { return idtask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Idscheduler
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idscheduler";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idscheduler;
            T& operator()() { return idscheduler; }
            const T& operator()() const { return idscheduler; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace TasksSchedulers_

  struct TasksSchedulers: sqlpp::table_t<TasksSchedulers,
               TasksSchedulers_::Idtask,
               TasksSchedulers_::Idscheduler>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "tasks_schedulers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T tasksSchedulers;
        T& operator()() { return tasksSchedulers; }
        const T& operator()() const { return tasksSchedulers; }
      };
    };
  };
  namespace TasksTaskers_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Idtask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idtask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idtask;
            T& operator()() { return idtask; }
            const T& operator()() const { return idtask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Idtasker
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idtasker";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idtasker;
            T& operator()() { return idtasker; }
            const T& operator()() const { return idtasker; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace TasksTaskers_

  struct TasksTaskers: sqlpp::table_t<TasksTaskers,
               TasksTaskers_::Id,
               TasksTaskers_::Idtask,
               TasksTaskers_::Idtasker>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "tasks_taskers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T tasksTaskers;
        T& operator()() { return tasksTaskers; }
        const T& operator()() const { return tasksTaskers; }
      };
    };
  };
  namespace Users_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Json
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "json";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T json;
            T& operator()() { return json; }
            const T& operator()() const { return json; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Users_

  struct Users: sqlpp::table_t<Users,
               Users_::Id,
               Users_::Username,
               Users_::Json>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "users";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T users;
        T& operator()() { return users; }
        const T& operator()() const { return users; }
      };
    };
  };
  namespace UsersApps_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Iduser
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "iduser";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iduser;
            T& operator()() { return iduser; }
            const T& operator()() const { return iduser; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Idapp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "idapp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T idapp;
            T& operator()() { return idapp; }
            const T& operator()() const { return idapp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct QaHistory
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "qa_history";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T qaHistory;
            T& operator()() { return qaHistory; }
            const T& operator()() const { return qaHistory; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace UsersApps_

  struct UsersApps: sqlpp::table_t<UsersApps,
               UsersApps_::Id,
               UsersApps_::Iduser,
               UsersApps_::Idapp,
               UsersApps_::QaHistory>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "users_apps";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T usersApps;
        T& operator()() { return usersApps; }
        const T& operator()() const { return usersApps; }
      };
    };
  };
} // namespace orm_prot
#endif
